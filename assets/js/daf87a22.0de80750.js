"use strict";(self.webpackChunkdocumentations=self.webpackChunkdocumentations||[]).push([[7501],{9613:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return f}});var r=t(9496);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function p(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),l=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):p(p({},n),e)),t},c=function(e){var n=l(e.components);return r.createElement(s.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=l(t),f=a,d=u["".concat(s,".").concat(f)]||u[f]||m[f]||o;return t?r.createElement(d,p(p({ref:n},c),{},{components:t})):r.createElement(d,p({ref:n},c))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,p=new Array(o);p[0]=u;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i.mdxType="string"==typeof e?e:a,p[1]=i;for(var l=2;l<o;l++)p[l]=t[l];return r.createElement.apply(null,p)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},6882:function(e,n,t){t.r(n),t.d(n,{assets:function(){return c},contentTitle:function(){return s},default:function(){return f},frontMatter:function(){return i},metadata:function(){return l},toc:function(){return m}});var r=t(5443),a=t(3010),o=(t(9496),t(9613)),p=["components"],i={id:"self-mapping",title:"Self Mapping (Same Identifier)",sidebar_label:"Self Mapping",sidebar_position:3},s=void 0,l={unversionedId:"misc/self-mapping",id:"misc/self-mapping",title:"Self Mapping (Same Identifier)",description:"In some cases, we might want to map a model (identifier) to itself. In AutoMapper TypeScript, this is called Self Mapping. Let's explore the following models",source:"@site/docs/misc/self-mapping.mdx",sourceDirName:"misc",slug:"/misc/self-mapping",permalink:"/docs/misc/self-mapping",draft:!1,editUrl:"https://github.com/nartc/mapper/tree/main/packages/documentations/docs/misc/self-mapping.mdx",tags:[],version:"current",lastUpdatedBy:"Chau Tran",lastUpdatedAt:1656654741,formattedLastUpdatedAt:"7/1/2022",sidebarPosition:3,frontMatter:{id:"self-mapping",title:"Self Mapping (Same Identifier)",sidebar_label:"Self Mapping",sidebar_position:3},sidebar:"docs",previous:{title:"Mapped Types",permalink:"/docs/misc/mapped-types"},next:{title:"Fake Async",permalink:"/docs/misc/fake-async"}},c={},m=[],u={toc:m};function f(e){var n=e.components,t=(0,a.Z)(e,p);return(0,o.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"In some cases, we might want to map a model (identifier) to itself. In AutoMapper TypeScript, this is called ",(0,o.kt)("strong",{parentName:"p"},"Self Mapping"),". Let's explore the following models"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"export class Person {\n  @AutoMap()\n  name!: string; // always required\n  @AutoMap()\n  nickname?: string; // can be optional\n}\n\nexport class Org {\n  @AutoMap(() => [Person])\n  people!: Person[];\n}\n\nexport class OrgDto {\n  @AutoMap(() => [Person])\n  people!: Person[];\n}\n")),(0,o.kt)("p",null,"Instead of having a ",(0,o.kt)("inlineCode",{parentName:"p"},"PersonDto"),", our ",(0,o.kt)("inlineCode",{parentName:"p"},"Org")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"OrgDto")," use ",(0,o.kt)("inlineCode",{parentName:"p"},"Person")," for the field ",(0,o.kt)("inlineCode",{parentName:"p"},"people"),". There are situations where this is the case. With this in mind, we can create our mappings as follow:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"/**\n * Short-hand syntax for\n *\n * createMap(\n *   mapper,\n *   Person,\n *   Person,\n *   forMember(...)\n * )\n */\ncreateMap(mapper, Person, forMember(d => d.nickname, mapFrom(s => s.nickname ?? s.name));\ncreateMap(mapper, Org, OrgDto);\n")),(0,o.kt)("p",null,"We can then map ",(0,o.kt)("inlineCode",{parentName:"p"},"Org")," to ",(0,o.kt)("inlineCode",{parentName:"p"},"OrgDto")," as normal"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'const dto = mapper.map(org, Org, OrgDto);\n// we can also map the "people"\n/**\n * Short-hand syntax for: mapper.mapArray(org.people, Person, Person);\n */\nconst mappedPeople = mapper.mapArray(org.people, Person);\n')))}f.isMDXComponent=!0}}]);